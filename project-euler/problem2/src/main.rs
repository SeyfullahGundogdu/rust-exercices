/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

 */
fn main(){
    fibonacci(-1);
    //to save summary
    let mut sum = 0;
    //to calculate fib value
    let mut count = 0;
    //to save the calculated value
    let mut value = fibonacci(count);


    //ANS: 3524578+832040+196418+46368+10946+2584+610+144+34+8+2+0 = 4613732
    while 4000000 > value{
        sum +=value;
        //increment count by 3 since fib serie goes as EVEN-ODD-ODD and repeats
        count += 3;
        value = fibonacci(count);
    }
    println!("{}",sum);
}

fn fibonacci(num_iter: i32)->i32{
    let mut first:i32 = 1;
    let mut second = first;
    let mut third = first + second;
    if num_iter < 0 {
        panic!("supplied value is smaller than 0");
    }
    match num_iter {
        0 => {0},
        1 => {first},
        2 => {second},
        3 => {third},
        other => {
            for _ in 1..other-1 {
                third = first + second;
                first = second;
                second = third;
            }
            third
        }
    }
    
}

#[test]
fn name() {
}